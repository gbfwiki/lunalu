# TODO: update this for 6.1
vcl 4.0;
import std;
backend default {
  .host = "{{ mediawiki_server }}";
  .port = "89";
  .connect_timeout = 10s;
  .first_byte_timeout = 10s;
  .between_bytes_timeout = 10s;
}

# access control list for "purge": open to only localhost and other local nodes
acl purge {
  "127.0.0.1";
  "{{ mediawiki_server }}"; 
}

# vcl_recv is called whenever a request is received 
sub vcl_recv {
  set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
  set req.backend_hint= default;

  if (req.method == "PURGE") {
      if (!client.ip ~ purge) {
          return (synth(405, "Not allowed."));
      } else {
          return (purge);
      }
  }

  # Pass any requests that Varnish does not understand straight to the backend.
  if (req.method != "GET" && req.method != "HEAD" &&
      req.method != "PUT" && req.method != "POST" &&
      req.method != "TRACE" && req.method != "OPTIONS" &&
      req.method != "DELETE") {
          return (pass);
  }

  # Pass anything other than GET and HEAD directly.
  if (req.method != "GET" && req.method != "HEAD") {
      return (pass);
  }      /* We only deal with GET and HEAD by default */

  # Don't cache special pages like Random
  if (req.url ~ "Special:Random" || req.url ~ "Special:Search" || req.url ~ "Special:RecentChanges" || req.url ~ "api.php") { return(pass); }

  # Remove has_js and Google Analytics __* cookies.
  set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(_[_a-z]+|has_js|vector-nav-.+)=[^;]*", "");
  # Remove a ";" prefix, if present.
  set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");

  # Pass requests from logged-in users directly.
  # Only detect cookies with "session" and "Token" in file name, otherwise nothing get cached.
  if (req.http.Authorization || req.http.Cookie ~ "session" || req.http.Cookie ~ "Token") {
      return (pass);
  }


  # Pass any requests with the "If-None-Match" header directly.
  if (req.http.If-None-Match) {
      return (pass);
  }

  # Force lookup if the request is a no-cache request from the client.
  if (req.http.Cache-Control ~ "no-cache") {
      ban(req.url);
  }

  # normalize Accept-Encoding to reduce vary
  if (req.http.Accept-Encoding) {
    if (req.http.User-Agent ~ "MSIE 6") {
      unset req.http.Accept-Encoding;
    } elsif (req.http.Accept-Encoding ~ "gzip") {
      set req.http.Accept-Encoding = "gzip";
    } elsif (req.http.Accept-Encoding ~ "deflate") {
      set req.http.Accept-Encoding = "deflate";
    } else {
      unset req.http.Accept-Encoding;
    }
  }
  return (hash);
}

sub vcl_pipe {
  set req.http.connection = "close";
}

# Called if the cache has a copy of the page.
sub vcl_hit {
  if (req.method == "PURGE") {
      ban(req.url);
      return (synth(200, "Purged"));
  }

  if (!obj.ttl > 0s) {
      return (pass);
  }
  if (obj.ttl < 0s && obj.ttl + obj.grace > 0s) {
    if (req.restarts == 0) {
        set req.http.sie-enabled = true;
        return (miss);
    } else {
        set req.http.sie-abandon = true;
        return (deliver);
    }
  }

  if (obj.ttl >= 0s) {
  return (deliver);
  }
  return (miss);
}
 
# Called if the cache does not have a copy of the page.
sub vcl_miss {
        if (req.method == "PURGE")  {
            return (synth(200, "Not in cache"));
        }
}

# Called after a document has been successfully retrieved from the backend.
sub vcl_backend_response {
        # set minimum timeouts to auto-discard stored objects
        set beresp.grace = 24h;

        # For static content strip all backend cookies and push to static storage
        if (bereq.url ~ "\.(css|js|png|gif|jp(e?)g)|swf|ico") {
                unset beresp.http.cookie;
                set beresp.storage_hint = "static";
                set beresp.http.x-storage = "static";
        } else {
                set beresp.storage_hint = "default";
                set beresp.http.x-storage = "default";
        }

        if (beresp.ttl < 48h) {
          set beresp.ttl = 48h;
        }       
 
        if (!beresp.ttl > 0s) {
          set beresp.uncacheable = true;
          return (deliver);
        }
 
        if (beresp.http.Set-Cookie) {
          set beresp.uncacheable = true;
          return (deliver);
        }
  
        if (beresp.http.Authorization && !beresp.http.Cache-Control ~ "public") {
          set beresp.uncacheable = true;
          return (deliver);
        }

      if (beresp.status >= 500 && beresp.status <= 599) {
          return (abandon);
      }

        return (deliver);
}

# cute 503 page, doesn't work in 6.1 because I assume synthetic got removed, TODO!
sub vcl_synth {
    if (resp.status == 503 && req.http.sie-enabled) {
        unset req.http.sie-enabled;
        return (restart);
    }
    if (resp.status == 503) {
        synthetic(std.fileread("/etc/varnish/error503.html"));
        return(deliver);
     }
}
